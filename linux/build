#! /bin/bash

# -----------------------------------------------------------------
#                         V A R I A B L E S
# -----------------------------------------------------------------

dependencies=( dh-make devscripts )

email="dpkg@kike.online"
fullname="Kike FontÃ¡n (@CosasDePuma)"

version=${1:-1.0}

# -----------------------------------------------------------------
#                            C O L O R S
# -----------------------------------------------------------------

nocolor="\e[0;0m"
colorinfo="\e[1;94m"
colorerror="\e[1;91m"
colorwarning="\e[1;33m"
colorsuccess="\e[1;92m"

# -----------------------------------------------------------------
#                          M E S S A G E S
# -----------------------------------------------------------------

info() {
  echo -e "$colorinfo[INFO]\t\t$nocolor$1 $colorinfo$2 $nocolor$3"
}

error() {
  echo -e "$colorerror[ERROR]\t\t$nocolor$1 $colorerror$2 $nocolor$3"
  exit 1
}

warning() {
  echo -e "$colorwarning[WARNING]\t$nocolor$1 $colorwarning$2 $nocolor$3"
}

success() {
  echo -e "$colorsuccess[SUCCESS]\t$colorsuccess$1 $nocolor$2"
}

# -----------------------------------------------------------------
#                         F U N C T I O N S
# -----------------------------------------------------------------

init_sudo() {
  info "Checking" sudo
  sudo_checked=true
  $sudo echo &>/dev/null
}

init_apt() {
  # (Un)install & Update
  # commands using apt-get
  aptu="apt-get update -qq -y"
  apti="apt-get install -qq -y"
}

init_variables() {
  # Temp file to save the choices
  tmp=/tmp/setup-build.sh.$$
  # A sudo checked flag
  sudo_checked=false
  # Context: sudo & user
  [ $EUID -eq 0 ] && sudo="" || sudo="sudo"
}

# -----------------------------------------------------------------

check() {
  case $1 in
    ask-cli)  set -- ask $2;;
    awscli)   set -- aws $2;;
  esac
  if [ "$2" = "module" ]; then
    if ! which $1 &>/dev/null; then
      error "The program" $1 "cannot be installed"
    fi
  else
    if ! dpkg -l $1 &>/dev/null; then
      error "The program" $1 "cannot be installed."
    fi
  fi
  success $1 "installed"
}

# -----------------------------------------------------------------

update() {
  info "Updating the" repositories
  $sudo $aptu && success repositories "updated"
}

inst() {
  info "Installing" $1
  $sudo $apti $1 &>/dev/null
  check $1
}

# -----------------------------------------------------------------

install_dependencies() {
  for dependency in ${dependencies[@]}; do
    if (dpkg -l $dependency | grep "<none>") &>/dev/null; then
      if [ "$sudo_checked" = "false" ]; then
        init_sudo
        update
      fi
      inst $dependency
    fi
  done
}

# -----------------------------------------------------------------

export_variables() {
  DEBEMAIL=$email
  DEBFULLNAME=$fullname
  warning "exporting" DEBEMAIL "as \"$email\""
  warning "exporting" DEBFULLNAME "as \"$fullname\""
  export DEBEMAIL DEBFULLNAME
}

check_folders() {
  info "purging" dist/setup-$version "folder"
  [ -d dist/setup-$version ] && rm -rf dist/setup-$version
  mkdir -p dist/setup-$version
  info "copying" "the scripts" "to the folder"
  [ -d script ] && cp script/*.sh dist/setup-$version
  cd dist/setup-$version
  for script in *.sh; do
    mv -- "$script" "${script%.sh}"
  done
}

build(){
  info "creating the" "debian package" "structure"
  dh_make --yes --indep --createorig &>/dev/null
  info "creating the" "install" "config file"
  echo "atom-packages usr/bin" > debian/install
  echo "program-bundle usr/bin" >> debian/install
  echo "vscode-extensions usr/bin" >> debian/install
  info "building the" "debian package"
  debuild -us -uc &>/dev/null || error "Some error has occurred during the" "packaging" "process"
  cd ..
  mv setup_$version-1_all.deb setup-$version.deb
  rm -rf setup-$version setup_$version*
}

# -----------------------------------------------------------------

correct() {
  success build "completed!"
  exit 0
}

# -----------------------------------------------------------------
#                             M A I N
# -----------------------------------------------------------------

init_apt
init_variables
install_dependencies
export_variables
check_folders
build && correct

# TODO:
#
# FIXME:
#

# .deb from .sh: https://blog.packagecloud.io/eng/2016/12/15/howto-build-debian-package-containing-simple-shell-scripts/
