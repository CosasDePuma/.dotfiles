#  -------------------------
# |        FUNCTIONS        |
#  -------------------------

docker_purge() {
    local containers
    containers=( $(docker ps -aq) )

    local volumes
    volumes=( $(docker ps --filter status=exited -q) )

    local images
    images=( $(docker images -q) )

    docker stop ${containers[@]}
    docker rm ${containers[@]}
    docker rm -v ${volumes[@]}
    docker rmi -f ${images[@]}
}

#  -------------------------
# |      MY CONTAINERS      |
#  -------------------------

searchsploit() {
    docker run --rm --tty                                       \
        --volume $PWD:/Downloads                                \
        --name searchsploit                                     \
        cosasdepuma/searchsploit "$@"
}

#  -------------------------
# |  THIRD-PART CONTAINERS  |
#  -------------------------

metasploit-framework() {
    docker run --interactive --tty --rm                         \
    --volume $HOME/.msf4/modules:/modules                       \
    --name metasploit                                           \
    metasploitframework/metasploit-framework
}
alias msfconsole=metasploit-framework

eclipse() {
    docker run --interactive --tty                              \
        --volume /tmp/.X11-unix:/tmp/.X11-unix                  \
        --env DISPLAY=unix$DISPLAY                              \
        --volume $PWD:/home/developer                           \
        --name eclipse                                          \
        rafdouglas/eclipse_docker:eclipse_mars_JavaEE           \
                                                             || \
    docker start eclipse
}

hollywood() {
    docker run --rm --interactive --tty                         \
        --name hollywood                                        \
        jess/hollywood
}

keepass2() {
    xhost +
    docker run --interactive --tty --rm                         \
        --volume $HOME/DB.kdbx:/root/DB.kdbx                    \
        --volume $HOME/DB.key:/root/DB.key                      \
        --volume /tmp/.X11-unix:/tmp/.X11-unix                  \
        --env DISPLAY=unix$DISPLAY                              \
        --name keepass2                                         \
        jess/keepass2                                           \
            /root/DB.kdbx/passwd.kdbx --keyfile:/root/DB.key
    xhost -
}
alias keepass=keepass2

netbeans() {
    docker run --interactive --tty                              \
           --volume /tmp/.X11-unix:/tmp/.X11-unix               \
           --env DISPLAY=unix$DISPLAY                           \
           --volume $PWD:/home/developer                        \
           --name netbeans                                      \
           fgrehm/netbeans:v8.0.1                               \
                                                             || \
    docker start netbeans
}
netcat() {
    docker run --rm --interactive --tty                         \
        --net host                                              \
        --name netcat                                           \
        jess/netcat "$@"
}
alias nc=netcat

nmap() {
    docker run --rm --interactive --tty                         \
        --net host                                              \
        --name nmap                                             \
        jess/nmap "$@"
}

steam() {
    docker run --detach --tty                                   \
        --volume /tmp/.X11-unix:/tmp/.X11-unix                  \
        --env DISPLAY=unix$DISPLAY                              \
        --device /dev/dri/card0                                 \
        --volume /run/user/$UID/pulse/native:/tmp/pulse         \
        --volume /dev/shm:/dev/shm                              \
        --volume /etc/machine-id:/etc/machine-id                \
        --name steam                                            \
        sassmann/ubuntu-steam                                   \
                                                             || \
    docker start steam
}

swipl(){
    docker run --interactive --tty --rm                         \
        --volume $PWD:/pl                                       \
        --name prolog                                           \
        swipl
}
alias prolog=swipl

torproxy() {
    if [ ! -d /etc/tor/ ]; then
        sudo mkdir -p /etc/tor
    fi

    if [ ! -f /etc/tor/torrc.default ]; then
        echo "SocksPort 0.0.0.0:9050" > ~/torrc.default
        echo "Log debug stderr"      >> ~/torrc.default
        sudo mv ~/torrc.default /etc/tor/torrc.default
    fi

    docker run --detach                                         \
        --restart always                                        \
        --volume /etc/localtime:/etc/localtime:ro               \
        --publish 127.0.1.1:9050:9050                           \
        --publish 127.0.1.1:5353:5353                           \
        --name torproxy                                         \
        jess/tor-proxy                                          \
                                                             || \
    docker stop torproxy; docker start torproxy

: << 'COMMENT'
    if [ ! -f /etc/tor/tor-iptables.sh ]; then
        sudo curl -o /etc/tor/tor-iptables.sh https://raw.githubusercontent.com/CosasDePuma/Setup/master/tor/tor-iptables.sh
    fi

    sudo bash /etc/tor/tor-iptables.sh
COMMENT

    # FIXME: Tor IPTables
}

tor-browser() {
    docker run --detach --rm                                    \
        --volume /tmp/.X11-unix:/tmp/.X11-unix                  \
        --env DISPLAY=unix$DISPLAY                              \
        --volume /dev/snd:/dev/snd                              \
        --volume /dev/shm:/dev/shm                              \
        --volume /etc/machine-id:/etc/machine-id:ro             \
        --name tor-browser                                      \
        jess/tor-browser
}
alias tor=tor-browser

visualstudio() {
    docker run --detach --rm                                    \
        --volume /etc/localtime:/etc/localtime:ro               \
        --volume /tmp/.X11-unix:/tmp/.X11-unix                  \
        --env DISPLAY=unix$DISPLAY                              \
        --volume $PWD:/home/user/code                           \
        --workdir /home/user/code                               \
        --name visualstudio                                     \
        jess/vscode $@

    # TODO: Extensions
}
alias code=visualstudio

wireshark(){
    docker run --detach --rm                                    \
        --volume "$PWD:/files"                                  \
        --volume /etc/localtime:/etc/localtime:ro               \
        --volume /tmp/.X11-unix:/tmp/.X11-unix                  \
        --env "DISPLAY=unix${DISPLAY}"                          \
        --cap-add NET_RAW                                       \
        --cap-add NET_ADMIN                                     \
        --net host                                              \
        --name wireshark                                        \
        jess/wireshark
}
